# graph-solution
import numpy as np
import matplotlib.pyplot as plt
import random



maximize=[1,3]

constraintA=[10,5,4]
constraintB=[(1,2),(1,0),(0,1)]


class LPsolver():
    def mark_coordinate(self,a1,b1,c1,a2,b2,c2,s):
        a1=float(a1)
        if (a2*b1-a1*b2)!=0:
            
            x=(c2*b1-c1*b2)/(a2*b1-a1*b2)
            y=(c2*a1-c1*a2)/(b2*a1-b1*a2)
            ##s="("+str(x)+","+str(y)+")"
            plt.annotate(s,xy=(x,y),xytext=(x-0.1,y-0.4))
            plt.plot(x,y,'ro')
        
    def coordinate_marker(self,B,A):
        A.append(0)
        A.append(0)
        B.append((0,1))
        B.append((1,0))   
        lx=len(A)
        k=65
        for i in range(lx):
            for j in range(i,lx):
                self.mark_coordinate(B[i][0],B[i][1],A[i],B[j][0],B[j][1],A[j],str(unichr(k)))
                k+=1
        

    def line_create(self,a,b,c):        
        r = lambda: random.randint(0,255)
        colr1='#%02X%02X%02X' % (r(),r(),r())
        colr2='#%02X%02X%02X' % (r(),r(),r())
        b=float(b)
        a=float(a)
        c=float(c)
        if b!=0:
            t=np.arange(-2,30,0.1)
            y=lambda t:(c-a*t)/b
            plt.fill_between(t,y(t),alpha=0.5,color=colr1)
            plt.plot(t,y(t),color=colr2)
        else:
            y=np.arange(-2,30,0.1)
            t=[(c/a)]*(y.size)
            plt.plot(t,y,color=colr2)
           
            t=np.arange(0,c/a,0.1)
            y=[30]*t.size
            plt.fill_between(t,y,alpha=0.5,color=colr1)

      

    def solve(self,x,y,z):
        self.coordinate_marker(z,y)
        lx=len(x)
        ly=len(y)
        arr=np.array(z)
        arr=np.concatenate((arr,np.identity(len(y))),1)
        y=np.array(y)
        a=[0]*lx
        for i in range(ly):
            self.line_create(z[i][0],z[i][1],y[i])
            
        arr=np.insert(arr,lx+ly,y,1)
        B=np.array([0]*ly)
        C=np.array(x+[0]*ly)
        bx=range(lx,lx+ly)
        while(1):
            maxp=[]
            minp=[]
            for i in range(lx+ly):
                maxp.append(C[i]-np.dot(B,arr[:,i]))


            z=maxp.index(max(maxp))

            if maxp[z]<=0:
                break
            for i in range(ly):
                if arr[i,z]!=0:
                    minp.append(arr[i,-1]/arr[i,z])
                else:
                    minp.append(10000000000)
            q=filter(lambda x:x>0,minp)
 

            if q==[]:
                return "unbounded function"
                break
            r=minp.index(min(q))

            B[r]=C[z]
            bx[r]=z
            arr[r,:]=arr[r,:]/arr[r,z]
            for i in range(ly):
                if(i!=r):
                    arr[i,:]=arr[i,:]-(arr[i,z]/arr[r,z])*arr[r,:]
       
        for i in range(len(bx)):
            if bx[i]<lx:
                a[bx[i]]=arr[i,-1]
        a=map(int,a)

        a.append(sum([a[i]*x[i] for i in range(lx)]))
##        s="("+str(a[0])+","+str(a[1])+")"
        s="Max Z = "+str(x[0]*a[0]+x[1]*a[1])
        plt.annotate(s,xy=(a[0]+0.1,a[1]+0.1),xytext=(a[0]+1,a[1]+0.5),arrowprops=dict(facecolor='black', shrink=0.05))
        plt.annotate("Simplex method",xy=(15,10),xytext=(11,9))
        plt.ylim(0,10)
        plt.xlim(0,15)
        ##self.line_create(x[0],-x[1],x[0]*a[1]-x[1]*a[0],)
        t=np.arange(0,15,0.001)
        h=lambda t:a[1]+(x[1]/x[0])*(t-a[0])
        plt.plot(t,h(t),'r--')
        
        return a


lps=LPsolver()
##plt.figure(num=None, figsize=(8, 6), dpi=80, facecolor='w', edgecolor='k')
#plt.axis([-5, 40, -5, 35])
y=np.arange(-8,35,0.01)
x=[0]*y.size
plt.plot(x,y,color="black")
y=np.arange(-2,35,0.01)
x=[0]*y.size
plt.plot(y,x,color="black")

solution=lps.solve(maximize,constraintA,constraintB)
print(solution)

plt.show()
    


