# graph-solution
import numpy as np
from numpy.polynomial import polynomial as P
import matplotlib.pyplot as plt

class Interpolate:
    def line_draw(self,a,b,colr='green'):
                if a[0]==b[0]:
                    if b[1]>a[1]:
                        y=np.arange(a[1],b[1],0.01)
                    else:
                        y=np.arange(b[1],a[1],0.01)
                    
                    x=[a[0]]*y.size
                    plt.plot(x,y,color=colr)
                    
                else:

                    y=lambda x:b[1]+(x-b[0])*((a[1]-b[1])/(a[0]-b[0]))
                    x=np.arange(a[0],b[0],0.0001)
                    plt.plot(x,y(x),color=colr)
                

    def func(self,t,coef):
        sum=0.0
     
        for i in range(len(coef)):
            sum+=coef[i]*(t**(i))
        return sum
        

    def graph_draw(self,coef):
            plt.xlim(-5,8)
            plt.ylim(-50,60)

            self.line_draw((-11,0),(11,0),"black")
            self.line_draw((0,-300),(0,300),"black")     
            t=np.arange(-11,11,0.01)
            plt.plot(t,self.func(t,coef))
            plt.annotate("$x-axis$",xy=(6,-3),xytext=(6,-3))
            plt.annotate("$y-axis$",xy=(-1.3,50),xytext=(-1.3,50))
            plt.annotate("$o$",xy=(-0.3,-2),xytext=(-0.3,-2))
        
        
    
    def solve(self,A,B,method):
        if(method=="newton"):
            return (self.Newton(A,B))
        else:
            return (self.Lagrange(A,B))

    def Lagrange(self,A,B):                                              
               
        l=len(A)                                                           
        w=(-1*A[0],1)                                                      
        for i in range(1,l):
            w=P.polymul(w,(-1*A[i],1))
        r=np.array([0.0 for i in range(len(w)-1)])                    
        d=P.polyder(w)                                             
        for i in range(l):
            r+=(P.polydiv(w,(-1*A[i],1))[0]*B[i])/P.polyval(A[i],d)   
        sol=list(r)
        self.graph_draw(sol)
        return sol
        
                                                                                                
    def Newton(self,A,B):                                                   
               
        from numpy import array
        from numpy.polynomial import polynomial as P
        n=len(A)                                                            
        mat=[[0.0 for i in range(n)] for j in range(n)]                    
        for k in range(n):                                                 
            mat[k][0]=B[k]
        for k in range(1,n):                                               
            for j in range(n-k):
                mat[j][k]=(mat[j+1][k-1]-mat[j][k-1])/(A[j+k]-A[j])
        r=np.array((mat[0][0],))                                          
        for i in range(1,n):
            prod=(-1*A[0],1)                                                                                              
            for j in range(1,i):
                prod=P.polymul(prod,(-1*A[j],1))                              
            r=P.polyadd(r,np.array(prod)*mat[0][i])                  
        return (list(r))
        

apx=Interpolate()                                                          
for method in ["lagrange"]:
    solution=apx.solve([1,2,3],[0,-1,0],method)
    print(solution)
plt.show()
